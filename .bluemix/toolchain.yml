version: '2'

template:
  name: "SECRETS_VIA_ENV_ENGINE"
  description: "SECRETS_VIA_ENV_ENGINE"
  required:
    - repo

  info:
    git url: >
      '[' + $env.repository + '](' + $env.repository + ')'
    git branch: >
      '[' + $env.branch + ']('+ $env.repository + '/tree/' + $env.branch + ')'

  $configuration:
    BASIC_WARNINGS: false
    ENABLE_EXTENSIONS: true
    ENABLE_SECRET_EXPANSION: true

toolchain:
  name: 'SECRETS_VIA_ENV_ENGINE'

# {
#   "plaintext": "tF9ss0W9HQUVkddcjSeGg/MqZFs2CVh/FFKLPLLnOwY=",
#   "ciphertext": "eyJjaXBoZXJ0ZXh0Ijoic1ZZRnZVcjdQanZXQ0tFakMwRFFWZktqQ3AyRmtiOFJOSDJSTkpZRzVmU1hWNDJScDRDVythU0h3Y009IiwiaGFzaCI6IjVWNzNBbm9XdUxxM1BvZEZpd1AxQTdQMUZrTkZOajVPMmtmMkNxdVBxL0NRdFlOZnBvempiYUxjRDNCSWhxOGpKZ2JNR0xhMHB4dDA4cTYyc0RJMGRBPT0iLCJpdiI6Ilc1T2tNWFZuWDFCTERDUk51M05EUlE9PSIsInZlcnNpb24iOiIzLjAuMCIsImhhbmRsZSI6IjRkZjg5ZGVlLWU3OTMtNGY5Ny05MGNjLTc1ZWQ5YjZlNWM4MiJ9"
# }

services:
  repo:
    service_id: hostedgit
    parameters:

      # ------------------------------

      # create standard key 'cloud-apikey'...
      test1: >
        $env.createSecret("kms:us-south:default:tmg-kp-1:cloud-apikey", "Hello World!")

      # retrieve standard key 'cloud-apikey'...
      test1: >
        $env.retrieveSecret("kms:us-south:default:tmg-kp-1:cloud-apikey")

      # update standard key 'cloud-apikey'...
      # - assumes the secret already exists
      # - backs up existing key, deletes existing key, recreates new key
      test1: >
        $env.updateSecret("kms:us-south:default:tmg-kp-1:cloud-apikey", "Hello Mars!")

      # delete standard key 'cloud-apikey'...
      test1: >
        $env.deleteSecret("kms:us-south:default:tmg-kp-1:cloud-apikey")

      # ------------------------------

      # create master key 'root-key' if it doesn't already exist...
      test1: >
        $env.createKey("kms:us-south:default:tmg-kp-1:root-key")

      # create standard key 'cloud-apikey' after 'wrapping' the given value using master key 'root-key'...
      # - note: 'cloud-apikey' will contain the wrapped ciphertext afterwards
      #         if 'root-key' is deleted, then 'cloud-apikey' can never be 'unwrapped'!
      test1: >
        $env.createSecret("kms:us-south:default:tmg-kp-1:cloud-apikey:root-key", "Hello World!")
        
      # retrieve standard key 'cloud-apikey' and 'unwrap' it using master key 'root-key'...
      test1: >
        $env.retrieveSecret("kms:us-south:default:tmg-kp-1:cloud-apikey:root-key")

      # update standard key 'cloud-apikey' after 'wrapping' the given value using master key 'root-key'...
      # - assumes the secret and key already exists
      # - backs up existing key, deletes existing key, recreates new key
      # - note: 'cloud-apikey' will contain the wrapped ciphertext afterwards
      #         if 'root-key' is deleted, then 'cloud-apikey' can never be 'unwrapped'!
      test1: >
        $env.updateSecret("kms:us-south:default:tmg-kp-1:cloud-apikey:root-key", "Hello Mars!")

      # rotate master key 'root-key'...
      test1: >
        $env.rotateKey("kms:us-south:default:tmg-kp-1:root-key")

      # delete standard key and root key...
      test1: >
        $env.deleteKey("kms:us-south:default:tmg-kp-1:root-key")
        $env.deleteSecret("kms:us-south:default:tmg-kp-1:cloud-apikey")

      # ------------------------------

      # 'wrap' the given ciphertext using master key 'root-key'...
      test1: >
        let value = $env.wrapSecretValue("kms:us-south:default:tmg-kp-1:root-key", "Hello Jupiter!");
        console.log(value); // => "eyJjaXBoZXJ0ZXh0Ijoic1Zi"

      # 'unwrap' the given ciphertext using master key 'root-key'...
      test1: >
        let value = $env.unwrapSecretValue("kms:us-south:default:tmg-kp-1:root-key", "eyJjaXBoZXJ0ZXh0Ijoic1Zi");
        console.log(value); // => "Hello Jupiter!"

      # ------------------------------

form:
  pipeline:
    parameters:
      username: 'admin'
      group: 'system'
    schema:
      $ref: deploy.json
