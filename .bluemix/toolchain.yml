version: '2'

template:
  name: "DYML: $switch/$case construct"
  description: "DYML: $switch/$case construct"
  required:
    - build
    - frontend-repo
    - sample-repo
  info:
    git url: >-
      [https://github.com/tonymcguckin/dynamicyml](https://github.com/tonymcguckin/dynamicyml)
    git branch: >-
      [master](https://github.com/tonymcguckin/dynamicyml/tree/master)

toolchain:
  name: 'DYML: $switch/$case construct'

  atom:
    $switch:
      - $expr: $env.atom
      - $default: 'particle'
        hello: world
      - $case: 'beam'
        foo: bar
      - $case: 'neutron'
        happy: days

services:

  # dynamic yml 'service' entry...
  sample-repo:

    $switch:

      - $expr: $env.case

      - $default: 'hostedgit'
        service_id: hostedgit
        parameters:
          repo_name: 'BYOC MyApp'
          repo_url: $env.app_repo || 'http://blah.com/repo'
          type: 'link'
          has_issues: true
          enable_traceability: true
  
      - $case: 'githubpublic'
        service_id: githubpublic
        parameters:
          repo_name: 'BYOC MyApp'
          repo_url: '{{app_repo}}'
          type: 'link'
          visibility: public

      - $case: 'github_integrated'
        service_id: github_integrated
        parameters:
          repo_name: 'BYOC MyApp'
          repo_url: '{{app_repo}}'
          type: 'link'
          has_issues: true
          enable_traceability: true

  # dynamic yml 'service' entry...
  frontend-repo:

    # yml preprocessor checks for the specified
    # $env.var (ie: 'source_provider in this example)
    # on the query string context to determine which $case
    # to match... if no match found, then it attempts
    # to use the specified $default case...
    
    $switch:
    
      - $expr: $env.case
 
      - $case: 'hostedgit'
        service_id: 'hostedgit'
        parameters:
          
          # yml preprocessor translates to {{app_repo}}...
          app_repo: $env.app_repo
          repo_url: $env.app_repo
          
          # yml preprocessor translates to {{app_repo}}...
          app_repo1: $env.app_repo
          app_repo2: '$env.app_repo'
          app_repo3: "$env.app_repo"
          
          # ignored by the yml preprocessor...
          app_repo4: {{app_repo}}
          app_repo5: '{{app_repo}}'
          app_repo6: "{{app_repo}}"
          
          # yml preprocessor translates to {{test}}...
          test: $env.test
          
          # yml preprocessor translates to {{test}}
          # if 'test' is present on the query context...
          # otherwise returns the RHS alternative...
          test1: $env.test || {{timestamp}}
          test2: $env.test || '{{timestamp}}'
          test3: $env.test || "{{timestamp}}"
          
          test4: $env.test||{{timestamp}}
          test5: $env.test||'{{timestamp}}'
          test6: $env.test||"{{timestamp}}"
          
          test7: '$env.test || {{timestamp}}'
          test8: "$env.test||{{timestamp}}"
          
          # ignored by the yml preprocessor...
          test9: {{test}}
          test10: '{{test}}'
          test11: "{{test}}"
          
          # yml preprocessor translates to {{test}}
          # if 'test' is present on the query context...
          # otherwise returns the RHS alternative...
          test12: $env.test || a7b9ddef66a
          test13: $env.test || 'a7b9ddef66a'
          test14: $env.test || "a7b9ddef66a"
          
          test15: $env.test||c6a8f7ac87c
          test16: $env.test||'c6a8f7ac87c'
          test17: $env.test||"c6a8f7ac87c"
          
          # yml preprocessor translates to {{test}}
          # if 'test' is present on the query context...
          # otherwise returns the RHS alternative...
          test18: $env.test || true
          test19: $env.test || false
          
          # yml preprocessor translates to {{test}}
          # if 'test' is present on the query context...
          # otherwise returns the RHS alternative...
          test20: $env.test || 0
          test21: $env.test || 1
          test22: $env.test || 2
          test23: $env.test || 10.0
          test24: $env.test || 10.1
          test25: $env.test || 0.0
          test26: $env.test || 0.1
          
          # misc object/js tests - all ignored
          # by the yml preprocessor...
          test27: {}
          test28: {window}
          test29: {eval('window')}
          test30: {javascript:eval('window')}
          test31: "javascript:eval('window')"
          test32: javascript:eval('window')
          test33: {a:1, b:2, c:3 }
          test34: '{a:1, b:2, c:3 }'
          test35: console.log("test34")
          test36: javascript:console.log("test35")
          
          test37: "{{USERNAME}}"
          test38: '{{form.pipeline.parameters.username}}'
          test39: "{{services.build.parameters.configuration.env.USERNAME}}"
          
          enable_traceability: true
          has_issues: true
          repo_name: 'frontend-repo-onhostedgit'
          type: clone
          
      - $default: 'githubpublic'
        service_id: 'githubpublic'
        parameters:
          repo_name: 'frontend-repo-ongithubpublic'
          app_repo: $env.app_repo
          repo_url: $env.app_repo
          type: $env.type || "link"
          has_issues: $env.issues || true
          enable_traceability: $env.trace || true
  
  # dynamic yml 'service' entry...
  build:
  
    $switch:

      - $expr: $env.pipeline

      - $default: 'p1'
        service_id: pipeline
        parameters:
          services:
            - frontend-repo
          name: 'Pipeline 1'
          ui-pipeline: true
          configuration:
            content:
              $text: pipeline.yml
            env:
              REPO: frontend-repo
              USERNAME: '{{form.pipeline.parameters.username}}'
              PASSWORD: '{{form.pipeline.parameters.password}}'
              API_KEY: '{{form.pipeline.parameters.api-key}}'
              SPACE: '{{form.pipeline.parameters.space}}'
              ORG: '{{form.pipeline.parameters.organization}}'
              REGION: '{{form.pipeline.parameters.region}}'
              GROUP: '{{form.pipeline.parameters.group}}'
            execute: true

      - $case: 'p2'
        service_id: pipeline
        parameters:
          services:
            - frontend-repo
          name: 'Pipeline 2'
          ui-pipeline: true
          configuration:
            content:
              $text: pipeline.yml
            env:
              REPO: frontend-repo
              USERNAME: '{{form.pipeline.parameters.username}}'
              PASSWORD: '{{form.pipeline.parameters.password}}'
              API_KEY: '{{form.pipeline.parameters.api-key}}'
              SPACE: '{{form.pipeline.parameters.space}}'
              ORG: '{{form.pipeline.parameters.organization}}'
              REGION: '{{form.pipeline.parameters.region}}'
              GROUP: '{{form.pipeline.parameters.group}}'
            execute: true

form:
  pipeline:
    parameters:
      username: 'admin'
      group: 'system'
    schema:
      $ref: deploy.json

# DYML toolchain building events...
#events:
#  on-before-load: >
#    if($env.mergeType == 1){
#      // if merge type 1 then dynamically inject
#      // the 'build' pipeline fragment into
#      // the list of services...
#      $env.load(
#        "build-pipeline-type-1.dyml",
#        "services"
#      );
#    }
#  on-after-load: >
#    // if we're targetting eu-irl, then ensure that
#    // the eu-irl config fragments is available to
#    // the pipeline environment...
#    if($env.services.build.parameters.configuration.env.REGION === "eu-irl"){
#      $env.load(
#        "eu-irl.yml",
#        "services.build.parameters.configuration.env.CONFIG"
#      );
#    }
